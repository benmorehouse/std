// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/interactor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInteractor is a mock of Interactor interface
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// Edit mocks base method
func (m *MockInteractor) Edit(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockInteractorMockRecorder) Edit(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockInteractor)(nil).Edit), filename)
}

// Input mocks base method
func (m *MockInteractor) Input() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(string)
	return ret0
}

// Input indicates an expected call of Input
func (mr *MockInteractorMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockInteractor)(nil).Input))
}
